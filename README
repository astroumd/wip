#    WIP

WIP is a interactive plotting frontend for PGPLOT. Originally
written by James Morgan for BIMA. The last version was 2.3,
maintained in CVS.

Converted to GIT in July 2021, as version 3.0.



# Installation Instructions



1.  It is assumed that you already have retrieved and built the
    PGPLOT (Version 5.1.0 or later) graphics library.  If not, it
    is pointless to continue.  For more information on PGPLOT, look
    at the WWW URL: "http://astro.caltech.edu/~tjp/pgplot/".  Be sure
    that, when building the PGPLOT library, that you also build the
    C-binding library.  When this is finished, you should check that
    there is a file called cpgplot.h in the same directory as the
    library archive and the two libraries (libcpgplot* libpgplot*) exist.

    Debian-style:      sudo apt install pgplot5
    Redhat-style:      sudo yum install pgplot-devel pgplot
    Mac/brew:          brew install pgplot
    Mac/port:          port install <TBD>


1   Retrieve the code via github
    
    git clone https://github.com/astroumd/wip

    This will create the sub-directory wip and other subdirectories.

3.  Create the subroutine library and the executable.

    The file wip/makewip is used to build WIP.  Make sure
    that you pass the proper arguments with the proper values.  This
    means that, in this example, the -wip argument should be set to
    /home/xxx/wip and -pgplot to the directory that holds the PGPLOT
    library (Version 5.0.0 or later).  A template script to illustrate
    how to call makewip is provided in the file /home/xxx/wip/domake.
    You may modify it accordingly and then use it to build WIP.

    NOTE:  If you get error messages when building the C-bindings for
    PGPLOT or when building WIP (complaints about cpgplot.h), then
    you need to read about installing PGPLOT.  The latest versions
    require the use of an ANSI C compiler in order to construct
    the C-bindings for PGPLOT (and hence, for WIP).  For a Sun-OS
    machine, for example, this should probably be acc in /usr/lang.
    If that is not available, then use gcc with the -ansi flag.

    Some gcc systems (earlier than 2.6.0?) have trouble with the
    standard varargs.h/stdarg.h declarations.  If this happens on your
    system you will usually see the complaint that looks something like
    the following:
       /home/xxx/wip/src/sysdepunix/inoutput.c: In function `wipoutput':
       /home/xxx/wip/src/sysdepunix/inoutput.c:105: `__builtin_va_alist'
       undeclared (first use this function)
    If this happens, change your compiler option (-cc) to include the
    following definition -DNOVARARGS.  For example, if you call makewip
    with -cc "gcc -ansi", then change it to -cc "gcc -ansi -DNOVARARGS".

    Also, some gcc versions have their libraries in non-standard
    locations.  PGPLOT (including and after version 5.0.2) comes with
    a nice shell script that will tell you what directory to use.  Execute
    the script /home/pgplot/cpg/libgcc_path.sh (change /home/pgplot to
    whatever directory holds your PGPLOT distribution).  This script will
    list the libraries needed by gcc.  What you need to do is look in
    each of these directories and find the one that has libgcc.a.  Add
    this directory to your path list for the PGPLOT distribution.  For
    example, if PGPLOT is in /home/pgplot and libgcc.a was found to be
    located in the directory /home/gcc/gcc-lib, then change the directive
    to '-pgplot "/home/pgplot /home/gcc/gcc-lib"'.

    To access the X-window server (used by the /xs and /xw driver), it
    must either be in a directory in your binary search path or you
    should add the environment variable PGPLOT_DIR to your ~/.cshrc and
    have it point to where the binary pgxwin_server (as well as grfont.dat
    and rgb.txt files) reside.

4.  Copy the file /home/xxx/wip/.wipinit to your $HOME area and
    modify it according to the instructions in the manual (see below).

5   Build and print the manual.

    An HTML version of the manual is available at the WWW URL:
    "http://bima.astro.umd.edu/wip/manual/wip.html"

    However, if you want the printed version, move to the directory
    /home/xxx/wip/doc and read the instructions found in the README
    file there.

6.  A list of changes in the various versions is also available
    from links of the WIP WWW site.  The HTML files are kept in the
    log subdirectory.


The pyWip tree is a contribution from Nicholas Chapman, a former grad
student at UMD.
